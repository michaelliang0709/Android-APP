package com.example.proandroidnutrition;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import android.app.Activity;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.os.Bundle;
import android.os.Handler;
import android.view.Window;

public class LoadingAct extends Activity {
	public static String dbName="nutrition.db";
    private static String DATABASE_PATH="/data/data/com.example.proandroidnutrition/databases/";
    private LoadingView main_imageview;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        boolean dbExist = checkDataBase();
        if(dbExist){
        	
        }else{
        	try{
        		copyDataBase();
        	}catch(IOException e){
        		throw new Error("Error copying database");
        	}
        }
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        // 取消状态栏
        //getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        //        WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.activity_loadingact);
        main_imageview = (LoadingView)findViewById(R.id.main_imageview);
        initLoadingImages();
        
        Handler h = new Handler();  
        h.postDelayed(new handler(), 5000);  
          
        new Thread()
        {
            @Override
            public void run()
            {
                main_imageview.startAnim();
            }
        }.start();
        
    }
    
    class handler implements Runnable{  
    	public void run() {  
            startActivity(new Intent(getApplication(),MainHome.class));  
            LoadingAct.this.finish();  
        }  
    }  
    
    private void initLoadingImages()
    {
        int[] imageIds = new int[6];
        imageIds[0] = R.drawable.loader_frame_1;
        imageIds[1] = R.drawable.loader_frame_2;
        imageIds[2] = R.drawable.loader_frame_3;
        imageIds[3] = R.drawable.loader_frame_4;
        imageIds[4] = R.drawable.loader_frame_5;
        imageIds[5] = R.drawable.loader_frame_6;
        
        main_imageview.setImageIds(imageIds);
    }
    public boolean checkDataBase(){
    	SQLiteDatabase checkDB = null;
    	try{
    		String databaseFilename = DATABASE_PATH+dbName;
    		checkDB =SQLiteDatabase.openDatabase(databaseFilename, null,
    				SQLiteDatabase.OPEN_READONLY);
    	}catch(SQLiteException e){
    		
    	}
    	if(checkDB!=null){
    		checkDB.close();
    	}
    	return checkDB !=null?true:false;
    }
    public void copyDataBase() throws IOException{
    	String databaseFilenames =DATABASE_PATH+dbName;
    	File dir = new File(DATABASE_PATH);
    	if(!dir.exists())
    		dir.mkdir();
    	FileOutputStream os = null;
    	try{
    		os = new FileOutputStream(databaseFilenames);
    	}catch(FileNotFoundException e){
    		e.printStackTrace();
    	}
    	InputStream is = this.getResources().openRawResource(R.raw.nutrition);
        byte[] buffer = new byte[8192];
        int count = 0;
        try{
        	
        	while((count=is.read(buffer))>0){
        		os.write(buffer, 0, count);
        		os.flush();
        	}
        }catch(IOException e){
        	
        }
        try{
        	is.close();
        	os.close();
        }catch(IOException e){
        	e.printStackTrace();
        }
    }
}
